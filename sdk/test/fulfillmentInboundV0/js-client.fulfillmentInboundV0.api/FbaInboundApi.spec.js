/*
 * Selling Partner API for Fulfillment Inbound
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/fulfillmentInboundV0/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/fulfillmentInboundV0/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForFulfillmentInbound);
  }
}(this, function(expect, SellingPartnerApiForFulfillmentInbound) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForFulfillmentInbound.FbaInboundApi();
  });

  describe('fulfillmentInboundV0', function() {
    describe('FbaInboundApi', function() {
      describe('getBillOfLading', function() {
        it('should call getBillOfLading successfully', function(done) {
          // TODO: uncomment, update parameter values for getBillOfLading call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";

          instance.getBillOfLading(shipmentId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetBillOfLadingResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.BillOfLadingDownloadURL);
                  expect(data.payload.downloadURL).to.be.a('string');
              // expect(data.payload.downloadURL).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLabels', function() {
        it('should call getLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for getLabels call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";
          var pageType = "pageType_example";
          var labelType = "labelType_example";
          var opts = {};
          opts.numberOfPackages = 56;
          opts.packageLabelsToPrint = ["packageLabelsToPrint_example"];
          opts.numberOfPallets = 56;
          opts.pageSize = 56;
          opts.pageStartIndex = 56;

          instance.getLabels(shipmentId, pageType, labelType, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetLabelsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.LabelDownloadURL);
                  expect(data.payload.downloadURL).to.be.a('string');
              // expect(data.payload.downloadURL).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPrepInstructions', function() {
        it('should call getPrepInstructions successfully', function(done) {
          // TODO: uncomment, update parameter values for getPrepInstructions call and complete the assertions
          /*
          var shipToCountryCode = "shipToCountryCode_example";
          var opts = {};
          opts.sellerSKUList = ["sellerSKUList_example"];
          opts.aSINList = ["aSINList_example"];

          instance.getPrepInstructions(shipToCountryCode, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetPrepInstructionsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.GetPrepInstructionsResult);
                  expect(data.payload.sKUPrepInstructionsList).to.be.a(SellingPartnerApiForFulfillmentInbound.SKUPrepInstructionsList);
                  expect(data.payload.invalidSKUList).to.be.a(SellingPartnerApiForFulfillmentInbound.InvalidSKUList);
                  expect(data.payload.aSINPrepInstructionsList).to.be.a(SellingPartnerApiForFulfillmentInbound.ASINPrepInstructionsList);
                  expect(data.payload.invalidASINList).to.be.a(SellingPartnerApiForFulfillmentInbound.InvalidASINList);
      
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipmentItems', function() {
        it('should call getShipmentItems successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipmentItems call and complete the assertions
          /*
          var queryType = "queryType_example";
          var marketplaceId = "marketplaceId_example";
          var opts = {};
          opts.lastUpdatedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.lastUpdatedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.nextToken = "nextToken_example";

          instance.getShipmentItems(queryType, marketplaceId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetShipmentItemsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.GetShipmentItemsResult);
                  expect(data.payload.itemData).to.be.a(SellingPartnerApiForFulfillmentInbound.InboundShipmentItemList);
                  expect(data.payload.nextToken).to.be.a('string');
              // expect(data.payload.nextToken).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipmentItemsByShipmentId', function() {
        it('should call getShipmentItemsByShipmentId successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipmentItemsByShipmentId call and complete the assertions
          /*
          var shipmentId = "shipmentId_example";
          var opts = {};
          opts.marketplaceId = "marketplaceId_example";

          instance.getShipmentItemsByShipmentId(shipmentId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetShipmentItemsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.GetShipmentItemsResult);
                  expect(data.payload.itemData).to.be.a(SellingPartnerApiForFulfillmentInbound.InboundShipmentItemList);
                  expect(data.payload.nextToken).to.be.a('string');
              // expect(data.payload.nextToken).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipments', function() {
        it('should call getShipments successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipments call and complete the assertions
          /*
          var queryType = "queryType_example";
          var marketplaceId = "marketplaceId_example";
          var opts = {};
          opts.shipmentStatusList = ["shipmentStatusList_example"];
          opts.shipmentIdList = ["shipmentIdList_example"];
          opts.lastUpdatedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.lastUpdatedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.nextToken = "nextToken_example";

          instance.getShipments(queryType, marketplaceId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SellingPartnerApiForFulfillmentInbound.GetShipmentsResponse);
            expect(data.payload).to.be.a(SellingPartnerApiForFulfillmentInbound.GetShipmentsResult);
                  expect(data.payload.shipmentData).to.be.a(SellingPartnerApiForFulfillmentInbound.InboundShipmentList);
                  expect(data.payload.nextToken).to.be.a('string');
              // expect(data.payload.nextToken).to.be("");
            expect(data.errors).to.be.a(SellingPartnerApiForFulfillmentInbound.ErrorList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
