/*
 * The Selling Partner API for Transfers.
 * The Selling Partner API for Transfers enables selling partners to retrieve payment methods and initiate payouts for their seller accounts. This API supports the following marketplaces: DE, FR, IT, ES, SE, NL, PL, and BE.
 *
 * OpenAPI spec version: 2024-06-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/transfers_2024-06-01/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/transfers_2024-06-01/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheSellingPartnerApiForTransfers);
  }
}(this, function(expect, TheSellingPartnerApiForTransfers) {
  'use strict';

  var instance;

  describe('transfers_2024-06-01', function() {
    describe('PaymentMethodDetails', function() {
      beforeEach(function() {
        instance = new TheSellingPartnerApiForTransfers.PaymentMethodDetails();
      });

      it('should create an instance of PaymentMethodDetails', function() {
        // TODO: update the code to test PaymentMethodDetails
        expect(instance).to.be.a(TheSellingPartnerApiForTransfers.PaymentMethodDetails);
      });

      it('should have the property accountHolderName (base name: "accountHolderName")', function() {
        // TODO: update the code to test the property accountHolderName
        expect(instance).to.have.property('accountHolderName');
        // expect(instance.accountHolderName).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMethodId (base name: "paymentMethodId")', function() {
        // TODO: update the code to test the property paymentMethodId
        expect(instance).to.have.property('paymentMethodId');
        // expect(instance.paymentMethodId).to.be(expectedValueLiteral);
      });

      it('should have the property tail (base name: "tail")', function() {
        // TODO: update the code to test the property tail
        expect(instance).to.have.property('tail');
        // expect(instance.tail).to.be(expectedValueLiteral);
      });

      it('should have the property expiryDate (base name: "expiryDate")', function() {
        // TODO: update the code to test the property expiryDate
        expect(instance).to.have.property('expiryDate');
        // expect(instance.expiryDate).to.be(expectedValueLiteral);
      });

      it('should have the property countryCode (base name: "countryCode")', function() {
        // TODO: update the code to test the property countryCode
        expect(instance).to.have.property('countryCode');
        // expect(instance.countryCode).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMethodType (base name: "paymentMethodType")', function() {
        // TODO: update the code to test the property paymentMethodType
        expect(instance).to.have.property('paymentMethodType');
        // expect(instance.paymentMethodType).to.be(expectedValueLiteral);
      });

      it('should have the property assignmentType (base name: "assignmentType")', function() {
        // TODO: update the code to test the property assignmentType
        expect(instance).to.have.property('assignmentType');
        // expect(instance.assignmentType).to.be(expectedValueLiteral);
      });

    });
  });

}));
