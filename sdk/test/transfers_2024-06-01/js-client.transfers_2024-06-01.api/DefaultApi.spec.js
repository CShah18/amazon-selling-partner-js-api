/*
 * The Selling Partner API for Transfers.
 * The Selling Partner API for Transfers enables selling partners to retrieve payment methods and initiate payouts for their seller accounts. This API supports the following marketplaces: DE, FR, IT, ES, SE, NL, PL, and BE.
 *
 * OpenAPI spec version: 2024-06-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/transfers_2024-06-01/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/transfers_2024-06-01/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheSellingPartnerApiForTransfers);
  }
}(this, function(expect, TheSellingPartnerApiForTransfers) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheSellingPartnerApiForTransfers.DefaultApi();
  });

  describe('transfers_2024-06-01', function() {
    describe('DefaultApi', function() {
      describe('getPaymentMethods', function() {
        it('should call getPaymentMethods successfully', function(done) {
          // TODO: uncomment, update parameter values for getPaymentMethods call and complete the assertions
          /*
          var marketplaceId = "ATVPDKIKX0DER";
          var opts = {};
          opts.paymentMethodTypes = ["BANK_ACCOUNT,CARD"];

          instance.getPaymentMethods(marketplaceId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForTransfers.GetPaymentMethodsResponse);
            expect(data.paymentMethods).to.be.a(TheSellingPartnerApiForTransfers.PaymentMethodList);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('initiatePayout', function() {
        it('should call initiatePayout successfully', function(done) {
          // TODO: uncomment, update parameter values for initiatePayout call and complete the assertions
          /*
          var body = new TheSellingPartnerApiForTransfers.InitiatePayoutRequest();
          body.marketplaceId = new TheSellingPartnerApiForTransfers.MarketplaceId();
          body.accountType = "";

          instance.initiatePayout(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TheSellingPartnerApiForTransfers.InitiatePayoutResponse);
            expect(data.payoutReferenceId).to.be.a('string');
            // expect(data.payoutReferenceId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
