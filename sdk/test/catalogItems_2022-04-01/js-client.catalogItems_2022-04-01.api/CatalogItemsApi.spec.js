/*
 * Catalog Items v2022-04-01
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/catalogItems_2022-04-01/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/catalogItems_2022-04-01/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CatalogItemsV20220401);
  }
}(this, function(expect, CatalogItemsV20220401) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CatalogItemsV20220401.CatalogItemsApi();
  });

  describe('catalogItems_2022-04-01', function() {
    describe('CatalogItemsApi', function() {
      describe('getCatalogItem', function() {
        it('should call getCatalogItem successfully', function(done) {
          // TODO: uncomment, update parameter values for getCatalogItem call and complete the assertions
          /*
          var asin = "asin_example";
          var marketplaceIds = ["ATVPDKIKX0DER"];
          var opts = {};
          opts.includedData = ["[\"summaries\"]"];
          opts.locale = "en_US";

          instance.getCatalogItem(asin, marketplaceIds, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(CatalogItemsV20220401.Item);
            expect(data.asin).to.be.a(CatalogItemsV20220401.ItemAsin);
                expect(data.attributes).to.be.a(CatalogItemsV20220401.ItemAttributes);
                expect(data.classifications).to.be.a(CatalogItemsV20220401.ItemBrowseClassifications);
                expect(data.dimensions).to.be.a(CatalogItemsV20220401.ItemDimensions);
                expect(data.identifiers).to.be.a(CatalogItemsV20220401.ItemIdentifiers);
                expect(data.images).to.be.a(CatalogItemsV20220401.ItemImages);
                expect(data.productTypes).to.be.a(CatalogItemsV20220401.ItemProductTypes);
                expect(data.relationships).to.be.a(CatalogItemsV20220401.ItemRelationships);
                expect(data.salesRanks).to.be.a(CatalogItemsV20220401.ItemSalesRanks);
                expect(data.summaries).to.be.a(CatalogItemsV20220401.ItemSummaries);
                expect(data.vendorDetails).to.be.a(CatalogItemsV20220401.ItemVendorDetails);
    
            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchCatalogItems', function() {
        it('should call searchCatalogItems successfully', function(done) {
          // TODO: uncomment, update parameter values for searchCatalogItems call and complete the assertions
          /*
          var marketplaceIds = ["ATVPDKIKX0DER"];
          var opts = {};
          opts.identifiers = ["shoes"];
          opts.identifiersType = "ASIN";
          opts.includedData = ["[\"summaries\"]"];
          opts.locale = "en_US";
          opts.sellerId = "sellerId_example";
          opts.keywords = ["shoes"];
          opts.brandNames = ["Beautiful Boats"];
          opts.classificationIds = ["12345678"];
          opts.pageSize = 10;
          opts.pageToken = "sdlkj234lkj234lksjdflkjwdflkjsfdlkj234234234234";
          opts.keywordsLocale = "en_US";

          instance.searchCatalogItems(marketplaceIds, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(CatalogItemsV20220401.ItemSearchResults);
            expect(data.numberOfResults).to.be.a('number');
            // expect(data.numberOfResults).to.be(0);
            expect(data.pagination).to.be.a(CatalogItemsV20220401.Pagination);
                  expect(data.pagination.nextToken).to.be.a('string');
              // expect(data.pagination.nextToken).to.be("");
              expect(data.pagination.previousToken).to.be.a('string');
              // expect(data.pagination.previousToken).to.be("");
            expect(data.refinements).to.be.a(CatalogItemsV20220401.Refinements);
                  {
                let dataCtr = data.refinements.brands;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(CatalogItemsV20220401.BrandRefinement);
                  expect(data.numberOfResults).to.be.a('number');
                  // expect(data.numberOfResults).to.be(0);
                  expect(data.brandName).to.be.a('string');
                  // expect(data.brandName).to.be("");
                }
              }
              {
                let dataCtr = data.refinements.classifications;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(CatalogItemsV20220401.ClassificationRefinement);
                  expect(data.numberOfResults).to.be.a('number');
                  // expect(data.numberOfResults).to.be(0);
                  expect(data.displayName).to.be.a('string');
                  // expect(data.displayName).to.be("");
                  expect(data.classificationId).to.be.a('string');
                  // expect(data.classificationId).to.be("");
                }
              }
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CatalogItemsV20220401.Item);
                expect(data.asin).to.be.a(CatalogItemsV20220401.ItemAsin);
                    expect(data.attributes).to.be.a(CatalogItemsV20220401.ItemAttributes);
                    expect(data.classifications).to.be.a(CatalogItemsV20220401.ItemBrowseClassifications);
                    expect(data.dimensions).to.be.a(CatalogItemsV20220401.ItemDimensions);
                    expect(data.identifiers).to.be.a(CatalogItemsV20220401.ItemIdentifiers);
                    expect(data.images).to.be.a(CatalogItemsV20220401.ItemImages);
                    expect(data.productTypes).to.be.a(CatalogItemsV20220401.ItemProductTypes);
                    expect(data.relationships).to.be.a(CatalogItemsV20220401.ItemRelationships);
                    expect(data.salesRanks).to.be.a(CatalogItemsV20220401.ItemSalesRanks);
                    expect(data.summaries).to.be.a(CatalogItemsV20220401.ItemSummaries);
                    expect(data.vendorDetails).to.be.a(CatalogItemsV20220401.ItemVendorDetails);
        
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
